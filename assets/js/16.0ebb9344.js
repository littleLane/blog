(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{218:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),a("p",{attrs:{align:"right"}},[t._v("-- wiki")]),a("br"),a("p"),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("在 JavaScript 中，我们常用的定义函数的两种方式如下：")]),t._v(" "),t._m(8),t._m(9),t._v(" "),a("p",[t._v("当然除了上面两种常用的定义函数的方式，我们还可以通过 Function 构造函数定义函数：")]),t._v(" "),t._m(10),a("p",[t._v("上面示例代码展示了通过 Function 构造函数来定义函数。在调用构造函数时，会传入多个参数，前面的参数表示构造生成函数的形参，最后的参数就是最终的函数体了。由于这种方式书写不方便，如果函数有复杂的函数体的话，这样的方式就不好表示了。")]),t._v(" "),a("p",[t._v("ES6 带来了函数新的定义方式 —— 箭头函数：")]),t._v(" "),t._m(11),a("p",[t._v("这种函数定义方式的出现是为了解决函数体 this 绑定问题的。在利用之前的方式定义函数时，函数体内部的 this 指向是很难确定的，但是在大多数开发场景中，我们可能都希望函数体的 this 指向是函数直接父级作用域的。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("针对 JavaScript 中函数一等公民的体现，我们对照着上面的"),a("a",{attrs:{href:"https://www.yuque.com/littlelane/javascript/usizdp#4d5b7928",target:"_blank",rel:"noopener noreferrer"}},[t._v("一等公民定义"),a("OutboundLink")],1),t._v("里面的特性，一点一点的来说。")]),t._v(" "),t._m(14),t._v(" "),a("p",[t._v("这一点，我们在上面函数的定义里面已经提到了。第二种定义函数的方式中，我们声明了一个匿名的函数表达式，然后将函数表达式赋值给了 myFunc 变量，然后我们如果需要调用该函数，直接执行 myFunc(arguments) 即可。所以，这一点完全符合。")]),t._v(" "),t._m(15),t._m(16),t._v(" "),a("p",[t._v("其实，函数可以作为参数传递这一特性，在我们实际项目开发中的代码是随处可见的，例如以下函数使用方式：")]),t._v(" "),t._m(17),a("p",[t._v("看到这里，你可以回想一下或者直接去你的项目中看一下代码，应该很容易就找到这种形式的代码了。")]),t._v(" "),a("p",[t._v("在实例代码中，函数接受其他参数的同时，还接受一个 callback 函数，这个函数在 myFunc 函数执行一定的逻辑后再被调用。实际的 myFunc 函数调用时，传入的参数和接受的参数顺序一致就好了。这些大家应该都知道，这就是我们后续要讲解到的回调函数和高阶函数的一种了，在这里我就不啰嗦了！")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),a("p",[t._v("想必大家对上面实例代码都不陌生了吧！")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),a("p",[t._v("说到这里，JavaScript 函数的一等公民或一等函数的特性就展露无遗了。正是因为函数一等公民的特性，才给我们带来了很多函数编程的模式，例如高阶函数、函数柯里化等等，让我们开发起来更加的得心应手。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),a("p",[t._v("函数的参数是函数重要的组成部分，没有参数的函数可复用性就会显得不那么强。")]),t._v(" "),a("p",[t._v("对于函数的参数，我们都知道分实参和形参两种：")]),t._v(" "),t._m(26),t._m(27),t._v(" "),a("p",[t._v("函数的形参和实参，大家估计都已经了解了，接下来说说函数形实参的几种方式的处理吧！")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),a("p",[t._v("这里提一下 ES6 参数默认值的特性，上面的函数可以改写成：")]),t._v(" "),t._m(34),a("p",[t._v("这样是不是就能更好的理解这个输入结果了呢!")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._v(" "),a("p",[t._v("在很多场景下，我们无法确定调用函数的传参个数究竟是多少个或者我们知道函数需要接受的参数就很多，总不能一个一个全部列出来吧！那这种情况怎么解决呢？幸好，JavaScript 函数给我提供了 arguments 这个函数变量。")]),t._v(" "),a("p",[t._v("arguments 是一个类数组，也就是包含 length 属性的对象。它的属性值里面包含调用函数是所有传递的实参，基本使用如下：")]),t._v(" "),t._m(40),a("p",[t._v("上面的示例代码，输出如下：")]),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("最终的输出结果和我们预想的一样。")]),t._v(" "),a("p",[t._v("说到这里，总结一句话：当发生函数调用的时候，实参被保存在一个叫做 arguments 的类数组对象中，而 arguments 中对应属性的值始终与被调用函数的参数保持一致。")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"函数一等公民"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数一等公民","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数一等公民")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"b9b90ed2"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一等公民定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一等公民定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 一等公民定义")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在很多技术文档和博客里面，我们都会看到像"),a("strong",[t._v("一等公民")]),t._v("这样的字眼。在使用 JavaScript 时听说函数是"),a("strong",[t._v("一等公民")]),t._v("，使用 React 的时候说组件是"),a("strong",[t._v("一等公民")]),t._v("。那到底什么是"),a("strong",[t._v("一等公民")]),t._v("呢，这个"),a("strong",[t._v("一等公民")]),t._v("到底有什么特性或者说怎样才算得上是"),a("strong",[t._v("一等公民")]),t._v("？接着往下看吧！"),a("br"),a("strong",[a("br")]),a("em",[t._v("In")]),t._v(" "),a("em",[t._v("programming")]),t._v(" "),a("em",[t._v("language")]),t._v(" "),a("em",[t._v("design")]),t._v(", "),a("em",[t._v("a")]),t._v(" "),a("em",[t._v("first-class")]),t._v(" "),a("em",[t._v("citizen")]),t._v(" ("),a("em",[t._v("also")]),t._v(" "),a("em",[t._v("type")]),t._v(", "),a("em",[t._v("object")]),t._v(", "),a("em",[t._v("entity")]),t._v(", "),a("em",[t._v("orvalue")]),t._v(") "),a("strong",[a("br")]),a("em",[t._v("in")]),t._v(" "),a("em",[t._v("a")]),t._v(" "),a("em",[t._v("given")]),t._v(" "),a("em",[t._v("programming")]),t._v(" "),a("em",[t._v("language")]),t._v(" "),a("em",[t._v("is")]),t._v(" "),a("em",[t._v("an")]),t._v(" "),a("em",[t._v("entity")]),t._v(" "),a("em",[t._v("which")]),t._v(" "),a("em",[t._v("supports")]),t._v(" "),a("em",[t._v("all")]),t._v(" "),a("em",[t._v("the")]),t._v(" "),a("em",[t._v("operationsgenerally")]),t._v(" "),a("em",[t._v("available")]),t._v(" "),a("em",[t._v("to")]),t._v(" "),a("em",[t._v("other")]),t._v(" "),a("em",[t._v("entities")]),t._v(". "),a("em",[t._v("These")]),t._v(" "),a("em",[t._v("operations")]),t._v(" "),a("em",[t._v("typically")]),t._v(" "),a("em",[t._v("include")]),t._v(" "),a("em",[t._v("being")]),t._v(" "),a("em",[t._v("passedas")]),t._v(" "),a("em",[t._v("an")]),t._v(" "),a("em",[t._v("argument")]),t._v(", "),a("em",[t._v("returned")]),t._v(" "),a("strong",[a("br")]),a("em",[t._v("from")]),t._v(" "),a("em",[t._v("a")]),t._v(" "),a("em",[t._v("function")]),t._v(", "),a("em",[t._v("and")]),t._v(" "),a("em",[t._v("assigned")]),t._v(" "),a("em",[t._v("to")]),t._v(" "),a("em",[t._v("a")]),t._v(" "),a("em",[t._v("variable")]),t._v(".**"),a("br")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("em",[a("strong",[t._v("一等公民")])]),t._v("，英文全称 "),a("strong",[t._v("“First-Class Citizen”。"),a("strong",[t._v("上面对")]),a("em",[t._v("一等公民")]),a("strong",[t._v("的一串英文解释来自维基百科，大致的意思就是说：在程序语言设计中，")]),a("em",[t._v("一等公民")])]),t._v("（包括类型，对象，实体或值）在一个给定的编程语言中是一个支持其他实体所有操作的实体。 这些操作通常包括作为参数传递，从函数中返回，分配给变量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("简单一点就是说：如果某程序设计语言中的一个类型，对象，实体或值可以作为参数传递，也可以从子程序中返回，还可以赋值给变量，那么就称它为"),s("strong",[this._v("一等公民")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"89f341f3"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"javascript-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" JavaScript 函数")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、直接声明名为 myFunc 的具名函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、声明一个匿名函数，并将函数赋值给 myFunc 变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上两种方式声明的函数都可以通过 "),s("code",[this._v("myFunc()")]),this._v(' 来调用，但是这两种函数声明的方式有一点细微的区别：第一种方式声明的函数叫具名函数或者命名函数，无论是在声明前调用还是在声明后调用，甚至是在不会执行到的位置（比如 return 语句的后面或者永远不为真的逻辑分支里面）都可以在整个作用域中进行访问；第二种则是声明了一个匿名的函数，然后赋值给一个变量，严格意义上来说，这不是一个函数的声明（function declaration）而是一个函数表达式（function expression），在赋值之前这个函数不能被任何代码访问到，也就是说这个赋值必须在调用之前完成，否则调用时会出现错误："TypeError: undefined is not a function"。')])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myFunc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"return a+b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"0db1e9fe"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"一等公民体现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一等公民体现","aria-hidden":"true"}},[this._v("#")]),this._v(" 一等公民体现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、可以赋值给变量")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个匿名函数，并将函数赋值给 myFunc 变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("2、可以作为参数传递")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个匿名函数，并将函数赋值给 myFunc 变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数，我们在传入其他参数的同时，传入 callback 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[s("strong",[this._v("接着看下一个特性！")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("3、可以从子程序中返回")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个匿名函数，并将函数赋值给 myFunc 变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("result1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，我们声明了一个匿名函数，然后将函数赋值给了 myFunc 变量。在函数的逻辑里面，我们最后返回了一个新的匿名函数。在实际执行 "),s("code",[this._v("myFunc()")]),this._v(" 调用外层定义的匿名函数时，会返回一个新的函数，也就是")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("result1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something }")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("此时，我们调用"),s("code",[this._v("result1()")]),this._v(" 就会得到最终的结果。这种形式的函数也就是我们后续要详细讲解的高阶函数的一种了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"9b105175"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"函数参数处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数参数处理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一个命名为 myFunc 的函数，函数接受 a, b, c 三个参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里函数接受的 a, b, c 三个参数就是我们通常说的形参了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something }")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过函数名称加 (1, 2, 3) 的形式调用函数，并传参 1, 2, 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里调用函数传递的 1, 2, 3 就是实参了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("实参：全称实际参数，指的是调用函数时传递的真实的值。对于基本类型，传递的是实际值，对于引用类型传递的是引用地址")]),this._v(" "),s("li",[this._v("形参：全称形式参数，指的是定义函数时接受被调用时传的实际值的变量，是一个虚拟的代号。对于基本类型，接受的是实际值，对于引用类型，接受的是引用的地址。然后在函数的逻辑中通过这些变量或代码进行函数逻辑的处理。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"08cf944e"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"形参多于实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#形参多于实参","aria-hidden":"true"}},[this._v("#")]),this._v(" 形参多于实参")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义命名为 myFunc 并接受两个参数的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myFunc 函数，并传递三个实参")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果只输出了由左到右匹配到的两个参数 1, 2，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有匹配上或者多余的参数被忽略了，不会做任何处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"f252311b"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"形参少于实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#形参少于实参","aria-hidden":"true"}},[this._v("#")]),this._v(" 形参少于实参")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义命名为 myFunc 并接受三个参数的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myFunc 函数，并传递两个实参")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仍旧，函数的参数会从左到右进行匹配，由于函数的接受参数有三个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 而调用时，传递的参数只有两个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据从左到右进行匹配的原则，a 接受 1，b 接受 2，c 接收不到值就是 undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以最后输出  1, 2, undefined")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义命名为 myFunc 并接受三个参数的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myFunc 函数，并传递两个实参")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仍旧，函数的参数会从左到右进行匹配，由于函数的接受参数有三个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 而调用时，传递的参数只有两个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据从左到右进行匹配的原则，a 接受 1，b 接受 2，c 接收不到值就是默认值 undefined 了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以最后输出  1, 2, undefined")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"fbd09bf9"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"形参等于实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#形参等于实参","aria-hidden":"true"}},[this._v("#")]),this._v(" 形参等于实参")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义命名为 myFunc 并接受三个参数的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myFunc 函数，并传递三个实参")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据从左到右进行匹配的原则，a 接受 1，b 接受 2，c 接收 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以最后输出  1, 2, 3")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"c6566ae0"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"获取所有实参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取所有实参","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取所有实参")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义命名为 myFunc 并接受未知个参数的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myFunc 函数，并传递三个实参")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终输出的结果会是一个包含 length 属性值为 3 的 arguments 类数组对象")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/114852/1548597379993-7f202394-1a3f-456d-b831-3a23febf38ff.png#align=left&display=inline&height=149&name=WX20190127-215534%402x.png&originHeight=306&originWidth=916&size=49727&status=done&width=445",alt:"WX20190127-215534@2x.png"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("a",{attrs:{name:"49381a3f"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"拓展知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拓展知识","aria-hidden":"true"}},[this._v("#")]),this._v(" 拓展知识")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1、二等公民：可以作为参数传递，但是不能从子程序中返回，也不能赋给变量。"),s("br"),this._v("2、三等公民：它的值连作为参数传递都不行。"),s("br"),this._v("3、在很多传统语言（例如 C/C++/Java/C# 等）中，函数都是作为二等公民存在的。你只能用语言的关键字声明一个函数，然后调用它。如果需要把函数作为参数传给另一个函数，或是赋值给一个本地变量，又或是作为返回值，就需要通过函数指针(function pointer)、代理(delegate)等特殊的方式周折一番。")])}],!1,null,null,null);s.default=e.exports}}]);